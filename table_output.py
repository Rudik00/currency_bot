from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import json
import os

table_output_router = Router()  # —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
CITIES = [
    "belostok", "bydgoszcz", "gdansk", "katowice", "krakow", "lodz",
    "lublin", "poznan", "rzeszow", "szczecin", "warszawa", "wroclaw"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
async def show_table_for_city(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=city.capitalize(), callback_data=f"select_city:{city}")]
            for city in CITIES
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    print("üü¢ –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@table_output_router.callback_query(F.data.startswith("select_city:"))
async def city_callback(callback: types.CallbackQuery):
    city = callback.data.split(":")[1]
    await callback.answer()  # —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.message.delete()
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city.capitalize()}")
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {city}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    max_length = 4096

    filepath = f"cities/{city}.json"
    if not os.path.exists(filepath):
        await callback.message.answer(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city.title()} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    
    with open(filepath, "r", encoding="utf-8") as f:
        data = json.load(f)


    if city not in data:
        await callback.message.answer(f"–î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É {city.title()} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    table = f"<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ ‚Äì {city.title()}:</b>\n\n"
    for address, values in data[city].items():
        usd_buy, usd_sell, eur_buy, eur_sell = values
        table += (
            f"<b>{address}</b>\n"
            f"USD: –ø–æ–∫—É–ø–∫–∞ {usd_buy}, –ø—Ä–æ–¥–∞–∂–∞ {usd_sell}\n"
            f"EUR: –ø–æ–∫—É–ø–∫–∞ {eur_buy}, –ø—Ä–æ–¥–∞–∂–∞ {eur_sell}\n\n"
        )
    MAX_LENGTH = 4096
    if len(table) <= MAX_LENGTH:
        await callback.message.answer(table, parse_mode="HTML")    
    else:
        table1 = f"<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ ‚Äì {city.title()}:</b>\n\n"
        table2 = f"<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ ‚Äì {city.title()}:</b>\n\n"
        print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({len(table)} —Å–∏–º–≤–æ–ª–æ–≤), –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç–æ.")
        for address, values in data[city].items():
            if len(table1) <= MAX_LENGTH:
                usd_buy, usd_sell, eur_buy, eur_sell = values
                table1 += (
                    f"<b>{address}</b>\n"
                    f"USD: –ø–æ–∫—É–ø–∫–∞ {usd_buy}, –ø—Ä–æ–¥–∞–∂–∞ {usd_sell}\n"
                    f"EUR: –ø–æ–∫—É–ø–∫–∞ {eur_buy}, –ø—Ä–æ–¥–∞–∂–∞ {eur_sell}\n\n"
                )
            else:
                usd_buy, usd_sell, eur_buy, eur_sell = values
                table2 += (
                    f"<b>{address}</b>\n"
                    f"USD: –ø–æ–∫—É–ø–∫–∞ {usd_buy}, –ø—Ä–æ–¥–∞–∂–∞ {usd_sell}\n"
                    f"EUR: –ø–æ–∫—É–ø–∫–∞ {eur_buy}, –ø—Ä–æ–¥–∞–∂–∞ {eur_sell}\n\n"
                )

        await callback.message.answer(table1, parse_mode="HTML")
        await callback.message.answer(table2, parse_mode="HTML")






