from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


from convert import user_amount_conversion


conversion_router = Router()  # —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è

# --- FSM —à–∞–≥–∏ ---
class ConversionForm(StatesGroup):
    choosing_currency = State()
    choosing_city = State()
    waiting_for_amount = State()


# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
conversion = [
    "USD -> PL", "PL -> USD", "EUR -> PL", "PL -> EUR"
]

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
CITIES = [
    "belostok", "bydgoszcz", "gdansk", "katowice", "krakow", "lodz",
    "lublin", "poznan", "rzeszow", "szczecin", "warszawa", "wroclaw"
]

# --- –ö–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç ---
async def choice_of_conversion(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=valuta.capitalize(), callback_data=f"currency:{valuta}")]
            for valuta in conversion
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(ConversionForm.choosing_currency)
    print("üü¢ –ö–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


# --- –ö–Ω–æ–ø–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ ---
def show_table_city() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=city.capitalize(), callback_data=f"select_city1:{city}")]
            for city in CITIES
        ]
    )
    return keyboard


# --- –õ–æ–≤–∏–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã ---
@conversion_router.callback_query(ConversionForm.choosing_currency, F.data.startswith("currency:"))
async def currency_callback(callback: types.CallbackQuery, state: FSMContext):
    conversion_option = callback.data.split(":")[1]
    await state.update_data(currency=conversion_option)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª—é—Ç—É
    await callback.answer()
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞–ª—é—Ç—É: {conversion_option}")

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞
    keyboard = show_table_city()
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {conversion_option}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=keyboard
    )
    await state.set_state(ConversionForm.choosing_city)


# --- –õ–æ–≤–∏–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ ---
@conversion_router.callback_query(ConversionForm.choosing_city, F.data.startswith("select_city1:"))
async def city_callback(callback: types.CallbackQuery, state: FSMContext):
    city_conversion = callback.data.split(":")[1]
    await state.update_data(city=city_conversion)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
    await callback.answer()
    print(f"üèô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city_conversion}")

    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ->"
    )
    await state.set_state(ConversionForm.waiting_for_amount)


# --- –õ–æ–≤–∏–º —á–∏—Å–ª–æ ---
@conversion_router.message(ConversionForm.waiting_for_amount, F.text.regexp(r"^\d+(\.\d+)?$"))
async def process_amount(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    amount = float(message.text)
    currency = user_data.get("currency")
    city = user_data.get("city")

    await message.answer(
        f"üìä –í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"–í–∞–ª—é—Ç–∞: {currency}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–°—É–º–º–∞: {amount}"
    )

    # --------- —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ --------
    result, well = await user_amount_conversion(currency, city, amount)
    await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫—É—Ä—Å—É: {well}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    await state.clear()  # –æ—á–∏—â–∞–µ–º FSM (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ)


# --- –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ ---
@conversion_router.message(ConversionForm.waiting_for_amount)
async def wrong_input(message: types.Message):
    await message.answer("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")